snippet link
	target_link_libraries( ${1:target} ${2:libraries} )
	${3}
snippet init
	cmake_minimum_required(VERSION ${1:2.8.2})
	project(${2:ProjectName})

	find_package(${3:library})

	include_directories(${$3_INCLUDE_DIRS})

	add_subdirectory(${0:src})

	add_executable($2)

	target_link_libraries($2 ${$3_LIBRARIES})

snippet proj
	project(${0:Name})

snippet min
	cmake_minimum_required(VERSION ${0:2.8.2})

snippet include
	include_directories(${${0:include_dir}})

snippet find
	find_package(${1:library} ${0:REQUIRED})

snippet glob
	file(glob ${1:srcs} *.${0:cpp})

snippet subdir
	add_subdirectory(${0:src})

snippet lib
	add_library(${1:lib} ${${0:srcs}})

snippet bin
	add_executable(${1:bin})

snippet set
	set(${1:var} ${0:val})

snippet dep
	add_dependencies(${1:target}
		${0:dep}
	)

snippet Ext_url
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
	  URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
	  SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
	  BINARY_DIR "${0:${CMAKE_BINARY_DIR}/gtest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet Ext_git
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}
	  GIT_TAG           ${3:master}
	  SOURCE_DIR        "${4:${CMAKE_BINARY_DIR}/googletest-src}"
	  BINARY_DIR        "${0:${CMAKE_BINARY_DIR}/googletest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet props
	set_target_properties(${1:target}
		${2:properties} ${3:compile_flags}
		${0:"-O3 -Wall -pedantic"}
	)

snippet test
	add_test(${1:ATestName} ${0:testCommand --options})
snippet target
	add_executable( ${1:target} main.cpp ${2} )
	${3}

snippet def
	add_definitions(-D${1:WITH_})

snippet sub
	add_subdirectory( ${1:subdir} )

snippet cuda
	cuda_add_executable( ${1:target} main.cpp ${2} )
	${3}

snippet inc
	include_directories(
	    ${CMAKE_CURRENT_SOURCE_DIR}/${1:include}/
		)

snippet opencv
	find_package( OpenCV 3.1 REQUIRED)
	message ("OpenCV version: ${OpenCV_VERSION}" )

snippet opencvlib
	    ${OpenCV_LIBS}

snippet doxygen
	find_package(Doxygen)

snippet doxtarget
	if(DOXYGEN_FOUND)
		message( "Setup documentation target \"doc${1:_}\"" )
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/mainpage.dox ${CMAKE_CURRENT_BINARY_DIR}/mainpage.dox @ONLY)
		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.in ${CMAKE_CURRENT_BINARY_DIR}/doxygen @ONLY)
		add_custom_target(doc_gui ALL
		${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating documentation for SR-GUI with Doxygen" VERBATIM)
		message( "Documentation created!" )
	else()
		message( "Doxygen not found. Building documentation not possible." )
	endif(DOXYGEN_FOUND)

snippet cmake
	project( ${1:name} )
	cmake_minimum_required( VERSION 3.5 )

	aux_source_directory(source SOURCES)
	include_directories(
	    ${CMAKE_CURRENT_SOURCE_DIR}/include/
		)

	add_executable( $1 main.cpp ${2} \${SOURCES})
	${3}

snippet cppflags
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra ") # nvcc doesn't like -pedantic 

snippet version
	cmake_minimum_required( VERSION ${1:3.5} )
snippet minimum_version
	cmake_minimum_required( VERSION ${1:3.5} )

snippet qt
	find_package( Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS Core Gui Widgets Xml OpenGL )
	set(CMAKE_AUTORCC ON)

	file(GLOB UI RELATIVE  "${CMAKE_CURRENT_SOURCE_DIR}" ${CMAKE_CURRENT_SOURCE_DIR}/ui/*.ui )
	file(GLOB UI_INCLUDES RELATIVE  "${CMAKE_CURRENT_SOURCE_DIR}" ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp )
	qt5_wrap_cpp(MOC_SRC ${UI_INCLUDES})
	qt5_wrap_ui(MOC_UI ${UI})

snippet translation
	find_package( Qt5LinguistTools )

	file(GLOB TRANSLATION_SOURCES  ${CMAKE_CURRENT_SOURCE_DIR}/source/*.cpp )
	file(GLOB TRANSLATION_INCLUDE  ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp )
	qt5_create_translation( foo.qm ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp  ${TRANSLATION_INCLUDE} ${UI} ${TRANSLATION_SOURCES} translation_de.ts )
	qt5_add_translation( TRANSLATIONS translation_de.ts )
